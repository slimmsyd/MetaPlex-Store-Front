/// <reference types="node" />
import { DataItem } from "arbundles";
import { PathLike } from "fs";
import Api from "arweave/node/lib/api";
import { AxiosResponse } from "axios";
import { Currency } from "./currencies";
import Utils from "./utils";
export declare const sleep: (ms: number) => Promise<void>;
export declare const checkPath: (path: PathLike) => Promise<boolean>;
export default class Uploader {
    private readonly api;
    private currency;
    private currencyConfig;
    private utils;
    constructor(api: Api, utils: Utils, currency: string, currencyConfig: Currency);
    /**
 * Uploads a file to the bundler
 * @param path to the file to be uploaded
 * @returns the response from the bundler
 */
    uploadFile(path: string): Promise<AxiosResponse<any>>;
    /**
     * Uploads data to the bundler
     * @param data
     * @param tags
     * @returns the response from the bundler
     */
    upload(data: Buffer, tags?: {
        name: string;
        value: string;
    }[]): Promise<AxiosResponse<any>>;
    uploadFolder(path: string, indexFile?: string): Promise<string>;
    /**
     * Asynchronous chunking uploader, able to upload an array of dataitems or paths
     * Paths allow for an optional arweave manifest, provided they all have a common base path <path>
     * Syncs manifest to disk every 5 (or less) items.
     * @param items - Array of DataItems or paths
     * @param path  - Common base path for provided path items
     * @returns - object containing responses for successful and failed items, as well as the manifest Txid if applicable
     */
    bulkUploader(items: DataItem[] | string[], path?: string): Promise<{
        processed: Map<string, any>;
        failed: Map<string, any>;
        manifestTx?: string;
    }>;
    /**
     * Uploads a given dataItem to the bundler
     * @param dataItem
     */
    dataItemUploader(dataItem: DataItem): Promise<AxiosResponse<any>>;
    private syncManifest;
}
