
import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";
import { Readable } from "stream";

export interface AccountLimit {
    
    TotalCodeSize?: number;
    
    CodeSizeUnzipped?: number;
    
    CodeSizeZipped?: number;
    
    ConcurrentExecutions?: number;
    
    UnreservedConcurrentExecutions?: number;
}
export declare namespace AccountLimit {
    
    const filterSensitiveLog: (obj: AccountLimit) => any;
}

export interface AccountUsage {
    
    TotalCodeSize?: number;
    
    FunctionCount?: number;
}
export declare namespace AccountUsage {
    
    const filterSensitiveLog: (obj: AccountUsage) => any;
}
export interface AddLayerVersionPermissionRequest {
    
    LayerName: string | undefined;
    
    VersionNumber: number | undefined;
    
    StatementId: string | undefined;
    
    Action: string | undefined;
    
    Principal: string | undefined;
    
    OrganizationId?: string;
    
    RevisionId?: string;
}
export declare namespace AddLayerVersionPermissionRequest {
    
    const filterSensitiveLog: (obj: AddLayerVersionPermissionRequest) => any;
}
export interface AddLayerVersionPermissionResponse {
    
    Statement?: string;
    
    RevisionId?: string;
}
export declare namespace AddLayerVersionPermissionResponse {
    
    const filterSensitiveLog: (obj: AddLayerVersionPermissionResponse) => any;
}

export interface InvalidParameterValueException extends __SmithyException, $MetadataBearer {
    name: "InvalidParameterValueException";
    $fault: "client";
    
    Type?: string;
    
    message?: string;
}
export declare namespace InvalidParameterValueException {
    
    const filterSensitiveLog: (obj: InvalidParameterValueException) => any;
}

export interface PolicyLengthExceededException extends __SmithyException, $MetadataBearer {
    name: "PolicyLengthExceededException";
    $fault: "client";
    Type?: string;
    message?: string;
}
export declare namespace PolicyLengthExceededException {
    
    const filterSensitiveLog: (obj: PolicyLengthExceededException) => any;
}

export interface PreconditionFailedException extends __SmithyException, $MetadataBearer {
    name: "PreconditionFailedException";
    $fault: "client";
    
    Type?: string;
    
    message?: string;
}
export declare namespace PreconditionFailedException {
    
    const filterSensitiveLog: (obj: PreconditionFailedException) => any;
}

export interface ResourceConflictException extends __SmithyException, $MetadataBearer {
    name: "ResourceConflictException";
    $fault: "client";
    
    Type?: string;
    
    message?: string;
}
export declare namespace ResourceConflictException {
    
    const filterSensitiveLog: (obj: ResourceConflictException) => any;
}

export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotFoundException";
    $fault: "client";
    Type?: string;
    Message?: string;
}
export declare namespace ResourceNotFoundException {
    
    const filterSensitiveLog: (obj: ResourceNotFoundException) => any;
}

export interface ServiceException extends __SmithyException, $MetadataBearer {
    name: "ServiceException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace ServiceException {
    
    const filterSensitiveLog: (obj: ServiceException) => any;
}
export declare enum ThrottleReason {
    CallerRateLimitExceeded = "CallerRateLimitExceeded",
    ConcurrentInvocationLimitExceeded = "ConcurrentInvocationLimitExceeded",
    FunctionInvocationRateLimitExceeded = "FunctionInvocationRateLimitExceeded",
    ReservedFunctionConcurrentInvocationLimitExceeded = "ReservedFunctionConcurrentInvocationLimitExceeded",
    ReservedFunctionInvocationRateLimitExceeded = "ReservedFunctionInvocationRateLimitExceeded"
}

export interface TooManyRequestsException extends __SmithyException, $MetadataBearer {
    name: "TooManyRequestsException";
    $fault: "client";
    
    retryAfterSeconds?: string;
    Type?: string;
    message?: string;
    Reason?: ThrottleReason | string;
}
export declare namespace TooManyRequestsException {
    
    const filterSensitiveLog: (obj: TooManyRequestsException) => any;
}
export interface AddPermissionRequest {
    
    FunctionName: string | undefined;
    
    StatementId: string | undefined;
    
    Action: string | undefined;
    
    Principal: string | undefined;
    
    SourceArn?: string;
    
    SourceAccount?: string;
    
    EventSourceToken?: string;
    
    Qualifier?: string;
    
    RevisionId?: string;
}
export declare namespace AddPermissionRequest {
    
    const filterSensitiveLog: (obj: AddPermissionRequest) => any;
}
export interface AddPermissionResponse {
    
    Statement?: string;
}
export declare namespace AddPermissionResponse {
    
    const filterSensitiveLog: (obj: AddPermissionResponse) => any;
}

export interface AliasRoutingConfiguration {
    
    AdditionalVersionWeights?: {
        [key: string]: number;
    };
}
export declare namespace AliasRoutingConfiguration {
    
    const filterSensitiveLog: (obj: AliasRoutingConfiguration) => any;
}

export interface AliasConfiguration {
    
    AliasArn?: string;
    
    Name?: string;
    
    FunctionVersion?: string;
    
    Description?: string;
    
    RoutingConfig?: AliasRoutingConfiguration;
    
    RevisionId?: string;
}
export declare namespace AliasConfiguration {
    
    const filterSensitiveLog: (obj: AliasConfiguration) => any;
}

export interface AllowedPublishers {
    
    SigningProfileVersionArns: string[] | undefined;
}
export declare namespace AllowedPublishers {
    
    const filterSensitiveLog: (obj: AllowedPublishers) => any;
}
export declare enum Architecture {
    arm64 = "arm64",
    x86_64 = "x86_64"
}
export interface CreateAliasRequest {
    
    FunctionName: string | undefined;
    
    Name: string | undefined;
    
    FunctionVersion: string | undefined;
    
    Description?: string;
    
    RoutingConfig?: AliasRoutingConfiguration;
}
export declare namespace CreateAliasRequest {
    
    const filterSensitiveLog: (obj: CreateAliasRequest) => any;
}
export declare enum CodeSigningPolicy {
    Enforce = "Enforce",
    Warn = "Warn"
}

export interface CodeSigningPolicies {
    
    UntrustedArtifactOnDeployment?: CodeSigningPolicy | string;
}
export declare namespace CodeSigningPolicies {
    
    const filterSensitiveLog: (obj: CodeSigningPolicies) => any;
}
export interface CreateCodeSigningConfigRequest {
    
    Description?: string;
    
    AllowedPublishers: AllowedPublishers | undefined;
    
    CodeSigningPolicies?: CodeSigningPolicies;
}
export declare namespace CreateCodeSigningConfigRequest {
    
    const filterSensitiveLog: (obj: CreateCodeSigningConfigRequest) => any;
}

export interface CodeSigningConfig {
    
    CodeSigningConfigId: string | undefined;
    
    CodeSigningConfigArn: string | undefined;
    
    Description?: string;
    
    AllowedPublishers: AllowedPublishers | undefined;
    
    CodeSigningPolicies: CodeSigningPolicies | undefined;
    
    LastModified: string | undefined;
}
export declare namespace CodeSigningConfig {
    
    const filterSensitiveLog: (obj: CodeSigningConfig) => any;
}
export interface CreateCodeSigningConfigResponse {
    
    CodeSigningConfig: CodeSigningConfig | undefined;
}
export declare namespace CreateCodeSigningConfigResponse {
    
    const filterSensitiveLog: (obj: CreateCodeSigningConfigResponse) => any;
}

export interface OnFailure {
    
    Destination?: string;
}
export declare namespace OnFailure {
    
    const filterSensitiveLog: (obj: OnFailure) => any;
}

export interface OnSuccess {
    
    Destination?: string;
}
export declare namespace OnSuccess {
    
    const filterSensitiveLog: (obj: OnSuccess) => any;
}

export interface DestinationConfig {
    
    OnSuccess?: OnSuccess;
    
    OnFailure?: OnFailure;
}
export declare namespace DestinationConfig {
    
    const filterSensitiveLog: (obj: DestinationConfig) => any;
}

export interface Filter {
    
    Pattern?: string;
}
export declare namespace Filter {
    
    const filterSensitiveLog: (obj: Filter) => any;
}

export interface FilterCriteria {
    
    Filters?: Filter[];
}
export declare namespace FilterCriteria {
    
    const filterSensitiveLog: (obj: FilterCriteria) => any;
}
export declare enum FunctionResponseType {
    ReportBatchItemFailures = "ReportBatchItemFailures"
}
export declare enum EndPointType {
    KAFKA_BOOTSTRAP_SERVERS = "KAFKA_BOOTSTRAP_SERVERS"
}

export interface SelfManagedEventSource {
    
    Endpoints?: {
        [key: string]: string[];
    };
}
export declare namespace SelfManagedEventSource {
    
    const filterSensitiveLog: (obj: SelfManagedEventSource) => any;
}
export declare enum SourceAccessType {
    BASIC_AUTH = "BASIC_AUTH",
    CLIENT_CERTIFICATE_TLS_AUTH = "CLIENT_CERTIFICATE_TLS_AUTH",
    SASL_SCRAM_256_AUTH = "SASL_SCRAM_256_AUTH",
    SASL_SCRAM_512_AUTH = "SASL_SCRAM_512_AUTH",
    SERVER_ROOT_CA_CERTIFICATE = "SERVER_ROOT_CA_CERTIFICATE",
    VIRTUAL_HOST = "VIRTUAL_HOST",
    VPC_SECURITY_GROUP = "VPC_SECURITY_GROUP",
    VPC_SUBNET = "VPC_SUBNET"
}

export interface SourceAccessConfiguration {
    
    Type?: SourceAccessType | string;
    
    URI?: string;
}
export declare namespace SourceAccessConfiguration {
    
    const filterSensitiveLog: (obj: SourceAccessConfiguration) => any;
}
export declare enum EventSourcePosition {
    AT_TIMESTAMP = "AT_TIMESTAMP",
    LATEST = "LATEST",
    TRIM_HORIZON = "TRIM_HORIZON"
}
export interface CreateEventSourceMappingRequest {
    
    EventSourceArn?: string;
    
    FunctionName: string | undefined;
    
    Enabled?: boolean;
    
    BatchSize?: number;
    
    FilterCriteria?: FilterCriteria;
    
    MaximumBatchingWindowInSeconds?: number;
    
    ParallelizationFactor?: number;
    
    StartingPosition?: EventSourcePosition | string;
    
    StartingPositionTimestamp?: Date;
    
    DestinationConfig?: DestinationConfig;
    
    MaximumRecordAgeInSeconds?: number;
    
    BisectBatchOnFunctionError?: boolean;
    
    MaximumRetryAttempts?: number;
    
    TumblingWindowInSeconds?: number;
    
    Topics?: string[];
    
    Queues?: string[];
    
    SourceAccessConfigurations?: SourceAccessConfiguration[];
    
    SelfManagedEventSource?: SelfManagedEventSource;
    
    FunctionResponseTypes?: (FunctionResponseType | string)[];
}
export declare namespace CreateEventSourceMappingRequest {
    
    const filterSensitiveLog: (obj: CreateEventSourceMappingRequest) => any;
}

export interface EventSourceMappingConfiguration {
    
    UUID?: string;
    
    StartingPosition?: EventSourcePosition | string;
    
    StartingPositionTimestamp?: Date;
    
    BatchSize?: number;
    
    MaximumBatchingWindowInSeconds?: number;
    
    ParallelizationFactor?: number;
    
    EventSourceArn?: string;
    
    FilterCriteria?: FilterCriteria;
    
    FunctionArn?: string;
    
    LastModified?: Date;
    
    LastProcessingResult?: string;
    
    State?: string;
    
    StateTransitionReason?: string;
    
    DestinationConfig?: DestinationConfig;
    
    Topics?: string[];
    
    Queues?: string[];
    
    SourceAccessConfigurations?: SourceAccessConfiguration[];
    
    SelfManagedEventSource?: SelfManagedEventSource;
    
    MaximumRecordAgeInSeconds?: number;
    
    BisectBatchOnFunctionError?: boolean;
    
    MaximumRetryAttempts?: number;
    
    TumblingWindowInSeconds?: number;
    
    FunctionResponseTypes?: (FunctionResponseType | string)[];
}
export declare namespace EventSourceMappingConfiguration {
    
    const filterSensitiveLog: (obj: EventSourceMappingConfiguration) => any;
}

export interface CodeSigningConfigNotFoundException extends __SmithyException, $MetadataBearer {
    name: "CodeSigningConfigNotFoundException";
    $fault: "client";
    Type?: string;
    Message?: string;
}
export declare namespace CodeSigningConfigNotFoundException {
    
    const filterSensitiveLog: (obj: CodeSigningConfigNotFoundException) => any;
}

export interface CodeStorageExceededException extends __SmithyException, $MetadataBearer {
    name: "CodeStorageExceededException";
    $fault: "client";
    
    Type?: string;
    message?: string;
}
export declare namespace CodeStorageExceededException {
    
    const filterSensitiveLog: (obj: CodeStorageExceededException) => any;
}

export interface CodeVerificationFailedException extends __SmithyException, $MetadataBearer {
    name: "CodeVerificationFailedException";
    $fault: "client";
    Type?: string;
    Message?: string;
}
export declare namespace CodeVerificationFailedException {
    
    const filterSensitiveLog: (obj: CodeVerificationFailedException) => any;
}

export interface FunctionCode {
    
    ZipFile?: Uint8Array;
    
    S3Bucket?: string;
    
    S3Key?: string;
    
    S3ObjectVersion?: string;
    
    ImageUri?: string;
}
export declare namespace FunctionCode {
    
    const filterSensitiveLog: (obj: FunctionCode) => any;
}

export interface DeadLetterConfig {
    
    TargetArn?: string;
}
export declare namespace DeadLetterConfig {
    
    const filterSensitiveLog: (obj: DeadLetterConfig) => any;
}

export interface Environment {
    
    Variables?: {
        [key: string]: string;
    };
}
export declare namespace Environment {
    
    const filterSensitiveLog: (obj: Environment) => any;
}

export interface FileSystemConfig {
    
    Arn: string | undefined;
    
    LocalMountPath: string | undefined;
}
export declare namespace FileSystemConfig {
    
    const filterSensitiveLog: (obj: FileSystemConfig) => any;
}

export interface ImageConfig {
    
    EntryPoint?: string[];
    
    Command?: string[];
    
    WorkingDirectory?: string;
}
export declare namespace ImageConfig {
    
    const filterSensitiveLog: (obj: ImageConfig) => any;
}
export declare enum PackageType {
    Image = "Image",
    Zip = "Zip"
}
export declare enum Runtime {
    dotnetcore10 = "dotnetcore1.0",
    dotnetcore20 = "dotnetcore2.0",
    dotnetcore21 = "dotnetcore2.1",
    dotnetcore31 = "dotnetcore3.1",
    go1x = "go1.x",
    java11 = "java11",
    java8 = "java8",
    java8al2 = "java8.al2",
    nodejs = "nodejs",
    nodejs10x = "nodejs10.x",
    nodejs12x = "nodejs12.x",
    nodejs14x = "nodejs14.x",
    nodejs43 = "nodejs4.3",
    nodejs43edge = "nodejs4.3-edge",
    nodejs610 = "nodejs6.10",
    nodejs810 = "nodejs8.10",
    provided = "provided",
    providedal2 = "provided.al2",
    python27 = "python2.7",
    python36 = "python3.6",
    python37 = "python3.7",
    python38 = "python3.8",
    python39 = "python3.9",
    ruby25 = "ruby2.5",
    ruby27 = "ruby2.7"
}
export declare enum TracingMode {
    Active = "Active",
    PassThrough = "PassThrough"
}

export interface TracingConfig {
    
    Mode?: TracingMode | string;
}
export declare namespace TracingConfig {
    
    const filterSensitiveLog: (obj: TracingConfig) => any;
}

export interface VpcConfig {
    
    SubnetIds?: string[];
    
    SecurityGroupIds?: string[];
}
export declare namespace VpcConfig {
    
    const filterSensitiveLog: (obj: VpcConfig) => any;
}
export interface CreateFunctionRequest {
    
    FunctionName: string | undefined;
    
    Runtime?: Runtime | string;
    
    Role: string | undefined;
    
    Handler?: string;
    
    Code: FunctionCode | undefined;
    
    Description?: string;
    
    Timeout?: number;
    
    MemorySize?: number;
    
    Publish?: boolean;
    
    VpcConfig?: VpcConfig;
    
    PackageType?: PackageType | string;
    
    DeadLetterConfig?: DeadLetterConfig;
    
    Environment?: Environment;
    
    KMSKeyArn?: string;
    
    TracingConfig?: TracingConfig;
    
    Tags?: {
        [key: string]: string;
    };
    
    Layers?: string[];
    
    FileSystemConfigs?: FileSystemConfig[];
    
    ImageConfig?: ImageConfig;
    
    CodeSigningConfigArn?: string;
    
    Architectures?: (Architecture | string)[];
}
export declare namespace CreateFunctionRequest {
    
    const filterSensitiveLog: (obj: CreateFunctionRequest) => any;
}

export interface EnvironmentError {
    
    ErrorCode?: string;
    
    Message?: string;
}
export declare namespace EnvironmentError {
    
    const filterSensitiveLog: (obj: EnvironmentError) => any;
}

export interface EnvironmentResponse {
    
    Variables?: {
        [key: string]: string;
    };
    
    Error?: EnvironmentError;
}
export declare namespace EnvironmentResponse {
    
    const filterSensitiveLog: (obj: EnvironmentResponse) => any;
}

export interface ImageConfigError {
    
    ErrorCode?: string;
    
    Message?: string;
}
export declare namespace ImageConfigError {
    
    const filterSensitiveLog: (obj: ImageConfigError) => any;
}

export interface ImageConfigResponse {
    
    ImageConfig?: ImageConfig;
    
    Error?: ImageConfigError;
}
export declare namespace ImageConfigResponse {
    
    const filterSensitiveLog: (obj: ImageConfigResponse) => any;
}
export declare enum LastUpdateStatus {
    Failed = "Failed",
    InProgress = "InProgress",
    Successful = "Successful"
}
export declare enum LastUpdateStatusReasonCode {
    EniLimitExceeded = "EniLimitExceeded",
    ImageAccessDenied = "ImageAccessDenied",
    ImageDeleted = "ImageDeleted",
    InsufficientRolePermissions = "InsufficientRolePermissions",
    InternalError = "InternalError",
    InvalidConfiguration = "InvalidConfiguration",
    InvalidImage = "InvalidImage",
    InvalidSecurityGroup = "InvalidSecurityGroup",
    InvalidSubnet = "InvalidSubnet",
    SubnetOutOfIPAddresses = "SubnetOutOfIPAddresses"
}

export interface Layer {
    
    Arn?: string;
    
    CodeSize?: number;
    
    SigningProfileVersionArn?: string;
    
    SigningJobArn?: string;
}
export declare namespace Layer {
    
    const filterSensitiveLog: (obj: Layer) => any;
}
export declare enum State {
    Active = "Active",
    Failed = "Failed",
    Inactive = "Inactive",
    Pending = "Pending"
}
export declare enum StateReasonCode {
    Creating = "Creating",
    EniLimitExceeded = "EniLimitExceeded",
    Idle = "Idle",
    ImageAccessDenied = "ImageAccessDenied",
    ImageDeleted = "ImageDeleted",
    InsufficientRolePermissions = "InsufficientRolePermissions",
    InternalError = "InternalError",
    InvalidConfiguration = "InvalidConfiguration",
    InvalidImage = "InvalidImage",
    InvalidSecurityGroup = "InvalidSecurityGroup",
    InvalidSubnet = "InvalidSubnet",
    Restoring = "Restoring",
    SubnetOutOfIPAddresses = "SubnetOutOfIPAddresses"
}

export interface TracingConfigResponse {
    
    Mode?: TracingMode | string;
}
export declare namespace TracingConfigResponse {
    
    const filterSensitiveLog: (obj: TracingConfigResponse) => any;
}

export interface VpcConfigResponse {
    
    SubnetIds?: string[];
    
    SecurityGroupIds?: string[];
    
    VpcId?: string;
}
export declare namespace VpcConfigResponse {
    
    const filterSensitiveLog: (obj: VpcConfigResponse) => any;
}

export interface FunctionConfiguration {
    
    FunctionName?: string;
    
    FunctionArn?: string;
    
    Runtime?: Runtime | string;
    
    Role?: string;
    
    Handler?: string;
    
    CodeSize?: number;
    
    Description?: string;
    
    Timeout?: number;
    
    MemorySize?: number;
    
    LastModified?: string;
    
    CodeSha256?: string;
    
    Version?: string;
    
    VpcConfig?: VpcConfigResponse;
    
    DeadLetterConfig?: DeadLetterConfig;
    
    Environment?: EnvironmentResponse;
    
    KMSKeyArn?: string;
    
    TracingConfig?: TracingConfigResponse;
    
    MasterArn?: string;
    
    RevisionId?: string;
    
    Layers?: Layer[];
    
    State?: State | string;
    
    StateReason?: string;
    
    StateReasonCode?: StateReasonCode | string;
    
    LastUpdateStatus?: LastUpdateStatus | string;
    
    LastUpdateStatusReason?: string;
    
    LastUpdateStatusReasonCode?: LastUpdateStatusReasonCode | string;
    
    FileSystemConfigs?: FileSystemConfig[];
    
    PackageType?: PackageType | string;
    
    ImageConfigResponse?: ImageConfigResponse;
    
    SigningProfileVersionArn?: string;
    
    SigningJobArn?: string;
    
    Architectures?: (Architecture | string)[];
}
export declare namespace FunctionConfiguration {
    
    const filterSensitiveLog: (obj: FunctionConfiguration) => any;
}

export interface InvalidCodeSignatureException extends __SmithyException, $MetadataBearer {
    name: "InvalidCodeSignatureException";
    $fault: "client";
    Type?: string;
    Message?: string;
}
export declare namespace InvalidCodeSignatureException {
    
    const filterSensitiveLog: (obj: InvalidCodeSignatureException) => any;
}
export interface DeleteAliasRequest {
    
    FunctionName: string | undefined;
    
    Name: string | undefined;
}
export declare namespace DeleteAliasRequest {
    
    const filterSensitiveLog: (obj: DeleteAliasRequest) => any;
}
export interface DeleteCodeSigningConfigRequest {
    
    CodeSigningConfigArn: string | undefined;
}
export declare namespace DeleteCodeSigningConfigRequest {
    
    const filterSensitiveLog: (obj: DeleteCodeSigningConfigRequest) => any;
}
export interface DeleteCodeSigningConfigResponse {
}
export declare namespace DeleteCodeSigningConfigResponse {
    
    const filterSensitiveLog: (obj: DeleteCodeSigningConfigResponse) => any;
}
export interface DeleteEventSourceMappingRequest {
    
    UUID: string | undefined;
}
export declare namespace DeleteEventSourceMappingRequest {
    
    const filterSensitiveLog: (obj: DeleteEventSourceMappingRequest) => any;
}

export interface ResourceInUseException extends __SmithyException, $MetadataBearer {
    name: "ResourceInUseException";
    $fault: "client";
    Type?: string;
    Message?: string;
}
export declare namespace ResourceInUseException {
    
    const filterSensitiveLog: (obj: ResourceInUseException) => any;
}
export interface DeleteFunctionRequest {
    
    FunctionName: string | undefined;
    
    Qualifier?: string;
}
export declare namespace DeleteFunctionRequest {
    
    const filterSensitiveLog: (obj: DeleteFunctionRequest) => any;
}
export interface DeleteFunctionCodeSigningConfigRequest {
    
    FunctionName: string | undefined;
}
export declare namespace DeleteFunctionCodeSigningConfigRequest {
    
    const filterSensitiveLog: (obj: DeleteFunctionCodeSigningConfigRequest) => any;
}
export interface DeleteFunctionConcurrencyRequest {
    
    FunctionName: string | undefined;
}
export declare namespace DeleteFunctionConcurrencyRequest {
    
    const filterSensitiveLog: (obj: DeleteFunctionConcurrencyRequest) => any;
}
export interface DeleteFunctionEventInvokeConfigRequest {
    
    FunctionName: string | undefined;
    
    Qualifier?: string;
}
export declare namespace DeleteFunctionEventInvokeConfigRequest {
    
    const filterSensitiveLog: (obj: DeleteFunctionEventInvokeConfigRequest) => any;
}
export interface DeleteLayerVersionRequest {
    
    LayerName: string | undefined;
    
    VersionNumber: number | undefined;
}
export declare namespace DeleteLayerVersionRequest {
    
    const filterSensitiveLog: (obj: DeleteLayerVersionRequest) => any;
}
export interface DeleteProvisionedConcurrencyConfigRequest {
    
    FunctionName: string | undefined;
    
    Qualifier: string | undefined;
}
export declare namespace DeleteProvisionedConcurrencyConfigRequest {
    
    const filterSensitiveLog: (obj: DeleteProvisionedConcurrencyConfigRequest) => any;
}
export interface GetAccountSettingsRequest {
}
export declare namespace GetAccountSettingsRequest {
    
    const filterSensitiveLog: (obj: GetAccountSettingsRequest) => any;
}
export interface GetAccountSettingsResponse {
    
    AccountLimit?: AccountLimit;
    
    AccountUsage?: AccountUsage;
}
export declare namespace GetAccountSettingsResponse {
    
    const filterSensitiveLog: (obj: GetAccountSettingsResponse) => any;
}
export interface GetAliasRequest {
    
    FunctionName: string | undefined;
    
    Name: string | undefined;
}
export declare namespace GetAliasRequest {
    
    const filterSensitiveLog: (obj: GetAliasRequest) => any;
}
export interface GetCodeSigningConfigRequest {
    
    CodeSigningConfigArn: string | undefined;
}
export declare namespace GetCodeSigningConfigRequest {
    
    const filterSensitiveLog: (obj: GetCodeSigningConfigRequest) => any;
}
export interface GetCodeSigningConfigResponse {
    
    CodeSigningConfig: CodeSigningConfig | undefined;
}
export declare namespace GetCodeSigningConfigResponse {
    
    const filterSensitiveLog: (obj: GetCodeSigningConfigResponse) => any;
}
export interface GetEventSourceMappingRequest {
    
    UUID: string | undefined;
}
export declare namespace GetEventSourceMappingRequest {
    
    const filterSensitiveLog: (obj: GetEventSourceMappingRequest) => any;
}
export interface GetFunctionRequest {
    
    FunctionName: string | undefined;
    
    Qualifier?: string;
}
export declare namespace GetFunctionRequest {
    
    const filterSensitiveLog: (obj: GetFunctionRequest) => any;
}

export interface FunctionCodeLocation {
    
    RepositoryType?: string;
    
    Location?: string;
    
    ImageUri?: string;
    
    ResolvedImageUri?: string;
}
export declare namespace FunctionCodeLocation {
    
    const filterSensitiveLog: (obj: FunctionCodeLocation) => any;
}
export interface Concurrency {
    
    ReservedConcurrentExecutions?: number;
}
export declare namespace Concurrency {
    
    const filterSensitiveLog: (obj: Concurrency) => any;
}
export interface GetFunctionResponse {
    
    Configuration?: FunctionConfiguration;
    
    Code?: FunctionCodeLocation;
    
    Tags?: {
        [key: string]: string;
    };
    
    Concurrency?: Concurrency;
}
export declare namespace GetFunctionResponse {
    
    const filterSensitiveLog: (obj: GetFunctionResponse) => any;
}
export interface GetFunctionCodeSigningConfigRequest {
    
    FunctionName: string | undefined;
}
export declare namespace GetFunctionCodeSigningConfigRequest {
    
    const filterSensitiveLog: (obj: GetFunctionCodeSigningConfigRequest) => any;
}
export interface GetFunctionCodeSigningConfigResponse {
    
    CodeSigningConfigArn: string | undefined;
    
    FunctionName: string | undefined;
}
export declare namespace GetFunctionCodeSigningConfigResponse {
    
    const filterSensitiveLog: (obj: GetFunctionCodeSigningConfigResponse) => any;
}
export interface GetFunctionConcurrencyRequest {
    
    FunctionName: string | undefined;
}
export declare namespace GetFunctionConcurrencyRequest {
    
    const filterSensitiveLog: (obj: GetFunctionConcurrencyRequest) => any;
}
export interface GetFunctionConcurrencyResponse {
    
    ReservedConcurrentExecutions?: number;
}
export declare namespace GetFunctionConcurrencyResponse {
    
    const filterSensitiveLog: (obj: GetFunctionConcurrencyResponse) => any;
}
export interface GetFunctionConfigurationRequest {
    
    FunctionName: string | undefined;
    
    Qualifier?: string;
}
export declare namespace GetFunctionConfigurationRequest {
    
    const filterSensitiveLog: (obj: GetFunctionConfigurationRequest) => any;
}
export interface FunctionEventInvokeConfig {
    
    LastModified?: Date;
    
    FunctionArn?: string;
    
    MaximumRetryAttempts?: number;
    
    MaximumEventAgeInSeconds?: number;
    
    DestinationConfig?: DestinationConfig;
}
export declare namespace FunctionEventInvokeConfig {
    
    const filterSensitiveLog: (obj: FunctionEventInvokeConfig) => any;
}
export interface GetFunctionEventInvokeConfigRequest {
    
    FunctionName: string | undefined;
    
    Qualifier?: string;
}
export declare namespace GetFunctionEventInvokeConfigRequest {
    
    const filterSensitiveLog: (obj: GetFunctionEventInvokeConfigRequest) => any;
}
export interface GetLayerVersionRequest {
    
    LayerName: string | undefined;
    
    VersionNumber: number | undefined;
}
export declare namespace GetLayerVersionRequest {
    
    const filterSensitiveLog: (obj: GetLayerVersionRequest) => any;
}

export interface LayerVersionContentOutput {
    
    Location?: string;
    
    CodeSha256?: string;
    
    CodeSize?: number;
    
    SigningProfileVersionArn?: string;
    
    SigningJobArn?: string;
}
export declare namespace LayerVersionContentOutput {
    
    const filterSensitiveLog: (obj: LayerVersionContentOutput) => any;
}
export interface GetLayerVersionResponse {
    
    Content?: LayerVersionContentOutput;
    
    LayerArn?: string;
    
    LayerVersionArn?: string;
    
    Description?: string;
    
    CreatedDate?: string;
    
    Version?: number;
    
    CompatibleRuntimes?: (Runtime | string)[];
    
    LicenseInfo?: string;
    
    CompatibleArchitectures?: (Architecture | string)[];
}
export declare namespace GetLayerVersionResponse {
    
    const filterSensitiveLog: (obj: GetLayerVersionResponse) => any;
}
export interface GetLayerVersionByArnRequest {
    
    Arn: string | undefined;
}
export declare namespace GetLayerVersionByArnRequest {
    
    const filterSensitiveLog: (obj: GetLayerVersionByArnRequest) => any;
}
export interface GetLayerVersionPolicyRequest {
    
    LayerName: string | undefined;
    
    VersionNumber: number | undefined;
}
export declare namespace GetLayerVersionPolicyRequest {
    
    const filterSensitiveLog: (obj: GetLayerVersionPolicyRequest) => any;
}
export interface GetLayerVersionPolicyResponse {
    
    Policy?: string;
    
    RevisionId?: string;
}
export declare namespace GetLayerVersionPolicyResponse {
    
    const filterSensitiveLog: (obj: GetLayerVersionPolicyResponse) => any;
}
export interface GetPolicyRequest {
    
    FunctionName: string | undefined;
    
    Qualifier?: string;
}
export declare namespace GetPolicyRequest {
    
    const filterSensitiveLog: (obj: GetPolicyRequest) => any;
}
export interface GetPolicyResponse {
    
    Policy?: string;
    
    RevisionId?: string;
}
export declare namespace GetPolicyResponse {
    
    const filterSensitiveLog: (obj: GetPolicyResponse) => any;
}
export interface GetProvisionedConcurrencyConfigRequest {
    
    FunctionName: string | undefined;
    
    Qualifier: string | undefined;
}
export declare namespace GetProvisionedConcurrencyConfigRequest {
    
    const filterSensitiveLog: (obj: GetProvisionedConcurrencyConfigRequest) => any;
}
export declare enum ProvisionedConcurrencyStatusEnum {
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS",
    READY = "READY"
}
export interface GetProvisionedConcurrencyConfigResponse {
    
    RequestedProvisionedConcurrentExecutions?: number;
    
    AvailableProvisionedConcurrentExecutions?: number;
    
    AllocatedProvisionedConcurrentExecutions?: number;
    
    Status?: ProvisionedConcurrencyStatusEnum | string;
    
    StatusReason?: string;
    
    LastModified?: string;
}
export declare namespace GetProvisionedConcurrencyConfigResponse {
    
    const filterSensitiveLog: (obj: GetProvisionedConcurrencyConfigResponse) => any;
}

export interface ProvisionedConcurrencyConfigNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ProvisionedConcurrencyConfigNotFoundException";
    $fault: "client";
    Type?: string;
    message?: string;
}
export declare namespace ProvisionedConcurrencyConfigNotFoundException {
    
    const filterSensitiveLog: (obj: ProvisionedConcurrencyConfigNotFoundException) => any;
}

export interface EC2AccessDeniedException extends __SmithyException, $MetadataBearer {
    name: "EC2AccessDeniedException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace EC2AccessDeniedException {
    
    const filterSensitiveLog: (obj: EC2AccessDeniedException) => any;
}

export interface EC2ThrottledException extends __SmithyException, $MetadataBearer {
    name: "EC2ThrottledException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace EC2ThrottledException {
    
    const filterSensitiveLog: (obj: EC2ThrottledException) => any;
}

export interface EC2UnexpectedException extends __SmithyException, $MetadataBearer {
    name: "EC2UnexpectedException";
    $fault: "server";
    Type?: string;
    Message?: string;
    EC2ErrorCode?: string;
}
export declare namespace EC2UnexpectedException {
    
    const filterSensitiveLog: (obj: EC2UnexpectedException) => any;
}

export interface EFSIOException extends __SmithyException, $MetadataBearer {
    name: "EFSIOException";
    $fault: "client";
    Type?: string;
    Message?: string;
}
export declare namespace EFSIOException {
    
    const filterSensitiveLog: (obj: EFSIOException) => any;
}

export interface EFSMountConnectivityException extends __SmithyException, $MetadataBearer {
    name: "EFSMountConnectivityException";
    $fault: "client";
    Type?: string;
    Message?: string;
}
export declare namespace EFSMountConnectivityException {
    
    const filterSensitiveLog: (obj: EFSMountConnectivityException) => any;
}

export interface EFSMountFailureException extends __SmithyException, $MetadataBearer {
    name: "EFSMountFailureException";
    $fault: "client";
    Type?: string;
    Message?: string;
}
export declare namespace EFSMountFailureException {
    
    const filterSensitiveLog: (obj: EFSMountFailureException) => any;
}

export interface EFSMountTimeoutException extends __SmithyException, $MetadataBearer {
    name: "EFSMountTimeoutException";
    $fault: "client";
    Type?: string;
    Message?: string;
}
export declare namespace EFSMountTimeoutException {
    
    const filterSensitiveLog: (obj: EFSMountTimeoutException) => any;
}

export interface ENILimitReachedException extends __SmithyException, $MetadataBearer {
    name: "ENILimitReachedException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace ENILimitReachedException {
    
    const filterSensitiveLog: (obj: ENILimitReachedException) => any;
}

export interface InvalidRequestContentException extends __SmithyException, $MetadataBearer {
    name: "InvalidRequestContentException";
    $fault: "client";
    
    Type?: string;
    
    message?: string;
}
export declare namespace InvalidRequestContentException {
    
    const filterSensitiveLog: (obj: InvalidRequestContentException) => any;
}

export interface InvalidRuntimeException extends __SmithyException, $MetadataBearer {
    name: "InvalidRuntimeException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace InvalidRuntimeException {
    
    const filterSensitiveLog: (obj: InvalidRuntimeException) => any;
}

export interface InvalidSecurityGroupIDException extends __SmithyException, $MetadataBearer {
    name: "InvalidSecurityGroupIDException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace InvalidSecurityGroupIDException {
    
    const filterSensitiveLog: (obj: InvalidSecurityGroupIDException) => any;
}

export interface InvalidSubnetIDException extends __SmithyException, $MetadataBearer {
    name: "InvalidSubnetIDException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace InvalidSubnetIDException {
    
    const filterSensitiveLog: (obj: InvalidSubnetIDException) => any;
}

export interface InvalidZipFileException extends __SmithyException, $MetadataBearer {
    name: "InvalidZipFileException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace InvalidZipFileException {
    
    const filterSensitiveLog: (obj: InvalidZipFileException) => any;
}
export declare enum InvocationType {
    DryRun = "DryRun",
    Event = "Event",
    RequestResponse = "RequestResponse"
}
export declare enum LogType {
    None = "None",
    Tail = "Tail"
}
export interface InvocationRequest {
    
    FunctionName: string | undefined;
    
    InvocationType?: InvocationType | string;
    
    LogType?: LogType | string;
    
    ClientContext?: string;
    
    Payload?: Uint8Array;
    
    Qualifier?: string;
}
export declare namespace InvocationRequest {
    
    const filterSensitiveLog: (obj: InvocationRequest) => any;
}
export interface InvocationResponse {
    
    StatusCode?: number;
    
    FunctionError?: string;
    
    LogResult?: string;
    
    Payload?: Uint8Array;
    
    ExecutedVersion?: string;
}
export declare namespace InvocationResponse {
    
    const filterSensitiveLog: (obj: InvocationResponse) => any;
}

export interface KMSAccessDeniedException extends __SmithyException, $MetadataBearer {
    name: "KMSAccessDeniedException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace KMSAccessDeniedException {
    
    const filterSensitiveLog: (obj: KMSAccessDeniedException) => any;
}

export interface KMSDisabledException extends __SmithyException, $MetadataBearer {
    name: "KMSDisabledException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace KMSDisabledException {
    
    const filterSensitiveLog: (obj: KMSDisabledException) => any;
}

export interface KMSInvalidStateException extends __SmithyException, $MetadataBearer {
    name: "KMSInvalidStateException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace KMSInvalidStateException {
    
    const filterSensitiveLog: (obj: KMSInvalidStateException) => any;
}

export interface KMSNotFoundException extends __SmithyException, $MetadataBearer {
    name: "KMSNotFoundException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace KMSNotFoundException {
    
    const filterSensitiveLog: (obj: KMSNotFoundException) => any;
}

export interface RequestTooLargeException extends __SmithyException, $MetadataBearer {
    name: "RequestTooLargeException";
    $fault: "client";
    Type?: string;
    message?: string;
}
export declare namespace RequestTooLargeException {
    
    const filterSensitiveLog: (obj: RequestTooLargeException) => any;
}

export interface ResourceNotReadyException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotReadyException";
    $fault: "server";
    
    Type?: string;
    
    message?: string;
}
export declare namespace ResourceNotReadyException {
    
    const filterSensitiveLog: (obj: ResourceNotReadyException) => any;
}

export interface SubnetIPAddressLimitReachedException extends __SmithyException, $MetadataBearer {
    name: "SubnetIPAddressLimitReachedException";
    $fault: "server";
    Type?: string;
    Message?: string;
}
export declare namespace SubnetIPAddressLimitReachedException {
    
    const filterSensitiveLog: (obj: SubnetIPAddressLimitReachedException) => any;
}

export interface UnsupportedMediaTypeException extends __SmithyException, $MetadataBearer {
    name: "UnsupportedMediaTypeException";
    $fault: "client";
    Type?: string;
    message?: string;
}
export declare namespace UnsupportedMediaTypeException {
    
    const filterSensitiveLog: (obj: UnsupportedMediaTypeException) => any;
}
export interface InvokeAsyncRequest {
    
    FunctionName: string | undefined;
    
    InvokeArgs: Readable | ReadableStream | Blob | undefined;
}
export declare namespace InvokeAsyncRequest {
    
    const filterSensitiveLog: (obj: InvokeAsyncRequest) => any;
}

export interface InvokeAsyncResponse {
    
    Status?: number;
}
export declare namespace InvokeAsyncResponse {
    
    const filterSensitiveLog: (obj: InvokeAsyncResponse) => any;
}
export interface ListAliasesRequest {
    
    FunctionName: string | undefined;
    
    FunctionVersion?: string;
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListAliasesRequest {
    
    const filterSensitiveLog: (obj: ListAliasesRequest) => any;
}
export interface ListAliasesResponse {
    
    NextMarker?: string;
    
    Aliases?: AliasConfiguration[];
}
export declare namespace ListAliasesResponse {
    
    const filterSensitiveLog: (obj: ListAliasesResponse) => any;
}
export interface ListCodeSigningConfigsRequest {
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListCodeSigningConfigsRequest {
    
    const filterSensitiveLog: (obj: ListCodeSigningConfigsRequest) => any;
}
export interface ListCodeSigningConfigsResponse {
    
    NextMarker?: string;
    
    CodeSigningConfigs?: CodeSigningConfig[];
}
export declare namespace ListCodeSigningConfigsResponse {
    
    const filterSensitiveLog: (obj: ListCodeSigningConfigsResponse) => any;
}
export interface ListEventSourceMappingsRequest {
    
    EventSourceArn?: string;
    
    FunctionName?: string;
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListEventSourceMappingsRequest {
    
    const filterSensitiveLog: (obj: ListEventSourceMappingsRequest) => any;
}
export interface ListEventSourceMappingsResponse {
    
    NextMarker?: string;
    
    EventSourceMappings?: EventSourceMappingConfiguration[];
}
export declare namespace ListEventSourceMappingsResponse {
    
    const filterSensitiveLog: (obj: ListEventSourceMappingsResponse) => any;
}
export interface ListFunctionEventInvokeConfigsRequest {
    
    FunctionName: string | undefined;
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListFunctionEventInvokeConfigsRequest {
    
    const filterSensitiveLog: (obj: ListFunctionEventInvokeConfigsRequest) => any;
}
export interface ListFunctionEventInvokeConfigsResponse {
    
    FunctionEventInvokeConfigs?: FunctionEventInvokeConfig[];
    
    NextMarker?: string;
}
export declare namespace ListFunctionEventInvokeConfigsResponse {
    
    const filterSensitiveLog: (obj: ListFunctionEventInvokeConfigsResponse) => any;
}
export declare enum FunctionVersion {
    ALL = "ALL"
}
export interface ListFunctionsRequest {
    
    MasterRegion?: string;
    
    FunctionVersion?: FunctionVersion | string;
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListFunctionsRequest {
    
    const filterSensitiveLog: (obj: ListFunctionsRequest) => any;
}

export interface ListFunctionsResponse {
    
    NextMarker?: string;
    
    Functions?: FunctionConfiguration[];
}
export declare namespace ListFunctionsResponse {
    
    const filterSensitiveLog: (obj: ListFunctionsResponse) => any;
}
export interface ListFunctionsByCodeSigningConfigRequest {
    
    CodeSigningConfigArn: string | undefined;
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListFunctionsByCodeSigningConfigRequest {
    
    const filterSensitiveLog: (obj: ListFunctionsByCodeSigningConfigRequest) => any;
}
export interface ListFunctionsByCodeSigningConfigResponse {
    
    NextMarker?: string;
    
    FunctionArns?: string[];
}
export declare namespace ListFunctionsByCodeSigningConfigResponse {
    
    const filterSensitiveLog: (obj: ListFunctionsByCodeSigningConfigResponse) => any;
}
export interface ListLayersRequest {
    
    CompatibleRuntime?: Runtime | string;
    
    Marker?: string;
    
    MaxItems?: number;
    
    CompatibleArchitecture?: Architecture | string;
}
export declare namespace ListLayersRequest {
    
    const filterSensitiveLog: (obj: ListLayersRequest) => any;
}

export interface LayerVersionsListItem {
    
    LayerVersionArn?: string;
    
    Version?: number;
    
    Description?: string;
    
    CreatedDate?: string;
    
    CompatibleRuntimes?: (Runtime | string)[];
    
    LicenseInfo?: string;
    
    CompatibleArchitectures?: (Architecture | string)[];
}
export declare namespace LayerVersionsListItem {
    
    const filterSensitiveLog: (obj: LayerVersionsListItem) => any;
}

export interface LayersListItem {
    
    LayerName?: string;
    
    LayerArn?: string;
    
    LatestMatchingVersion?: LayerVersionsListItem;
}
export declare namespace LayersListItem {
    
    const filterSensitiveLog: (obj: LayersListItem) => any;
}
export interface ListLayersResponse {
    
    NextMarker?: string;
    
    Layers?: LayersListItem[];
}
export declare namespace ListLayersResponse {
    
    const filterSensitiveLog: (obj: ListLayersResponse) => any;
}
export interface ListLayerVersionsRequest {
    
    CompatibleRuntime?: Runtime | string;
    
    LayerName: string | undefined;
    
    Marker?: string;
    
    MaxItems?: number;
    
    CompatibleArchitecture?: Architecture | string;
}
export declare namespace ListLayerVersionsRequest {
    
    const filterSensitiveLog: (obj: ListLayerVersionsRequest) => any;
}
export interface ListLayerVersionsResponse {
    
    NextMarker?: string;
    
    LayerVersions?: LayerVersionsListItem[];
}
export declare namespace ListLayerVersionsResponse {
    
    const filterSensitiveLog: (obj: ListLayerVersionsResponse) => any;
}
export interface ListProvisionedConcurrencyConfigsRequest {
    
    FunctionName: string | undefined;
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListProvisionedConcurrencyConfigsRequest {
    
    const filterSensitiveLog: (obj: ListProvisionedConcurrencyConfigsRequest) => any;
}

export interface ProvisionedConcurrencyConfigListItem {
    
    FunctionArn?: string;
    
    RequestedProvisionedConcurrentExecutions?: number;
    
    AvailableProvisionedConcurrentExecutions?: number;
    
    AllocatedProvisionedConcurrentExecutions?: number;
    
    Status?: ProvisionedConcurrencyStatusEnum | string;
    
    StatusReason?: string;
    
    LastModified?: string;
}
export declare namespace ProvisionedConcurrencyConfigListItem {
    
    const filterSensitiveLog: (obj: ProvisionedConcurrencyConfigListItem) => any;
}
export interface ListProvisionedConcurrencyConfigsResponse {
    
    ProvisionedConcurrencyConfigs?: ProvisionedConcurrencyConfigListItem[];
    
    NextMarker?: string;
}
export declare namespace ListProvisionedConcurrencyConfigsResponse {
    
    const filterSensitiveLog: (obj: ListProvisionedConcurrencyConfigsResponse) => any;
}
export interface ListTagsRequest {
    
    Resource: string | undefined;
}
export declare namespace ListTagsRequest {
    
    const filterSensitiveLog: (obj: ListTagsRequest) => any;
}
export interface ListTagsResponse {
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace ListTagsResponse {
    
    const filterSensitiveLog: (obj: ListTagsResponse) => any;
}
export interface ListVersionsByFunctionRequest {
    
    FunctionName: string | undefined;
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListVersionsByFunctionRequest {
    
    const filterSensitiveLog: (obj: ListVersionsByFunctionRequest) => any;
}
export interface ListVersionsByFunctionResponse {
    
    NextMarker?: string;
    
    Versions?: FunctionConfiguration[];
}
export declare namespace ListVersionsByFunctionResponse {
    
    const filterSensitiveLog: (obj: ListVersionsByFunctionResponse) => any;
}

export interface LayerVersionContentInput {
    
    S3Bucket?: string;
    
    S3Key?: string;
    
    S3ObjectVersion?: string;
    
    ZipFile?: Uint8Array;
}
export declare namespace LayerVersionContentInput {
    
    const filterSensitiveLog: (obj: LayerVersionContentInput) => any;
}
export interface PublishLayerVersionRequest {
    
    LayerName: string | undefined;
    
    Description?: string;
    
    Content: LayerVersionContentInput | undefined;
    
    CompatibleRuntimes?: (Runtime | string)[];
    
    LicenseInfo?: string;
    
    CompatibleArchitectures?: (Architecture | string)[];
}
export declare namespace PublishLayerVersionRequest {
    
    const filterSensitiveLog: (obj: PublishLayerVersionRequest) => any;
}
export interface PublishLayerVersionResponse {
    
    Content?: LayerVersionContentOutput;
    
    LayerArn?: string;
    
    LayerVersionArn?: string;
    
    Description?: string;
    
    CreatedDate?: string;
    
    Version?: number;
    
    CompatibleRuntimes?: (Runtime | string)[];
    
    LicenseInfo?: string;
    
    CompatibleArchitectures?: (Architecture | string)[];
}
export declare namespace PublishLayerVersionResponse {
    
    const filterSensitiveLog: (obj: PublishLayerVersionResponse) => any;
}
export interface PublishVersionRequest {
    
    FunctionName: string | undefined;
    
    CodeSha256?: string;
    
    Description?: string;
    
    RevisionId?: string;
}
export declare namespace PublishVersionRequest {
    
    const filterSensitiveLog: (obj: PublishVersionRequest) => any;
}
export interface PutFunctionCodeSigningConfigRequest {
    
    CodeSigningConfigArn: string | undefined;
    
    FunctionName: string | undefined;
}
export declare namespace PutFunctionCodeSigningConfigRequest {
    
    const filterSensitiveLog: (obj: PutFunctionCodeSigningConfigRequest) => any;
}
export interface PutFunctionCodeSigningConfigResponse {
    
    CodeSigningConfigArn: string | undefined;
    
    FunctionName: string | undefined;
}
export declare namespace PutFunctionCodeSigningConfigResponse {
    
    const filterSensitiveLog: (obj: PutFunctionCodeSigningConfigResponse) => any;
}
export interface PutFunctionConcurrencyRequest {
    
    FunctionName: string | undefined;
    
    ReservedConcurrentExecutions: number | undefined;
}
export declare namespace PutFunctionConcurrencyRequest {
    
    const filterSensitiveLog: (obj: PutFunctionConcurrencyRequest) => any;
}
export interface PutFunctionEventInvokeConfigRequest {
    
    FunctionName: string | undefined;
    
    Qualifier?: string;
    
    MaximumRetryAttempts?: number;
    
    MaximumEventAgeInSeconds?: number;
    
    DestinationConfig?: DestinationConfig;
}
export declare namespace PutFunctionEventInvokeConfigRequest {
    
    const filterSensitiveLog: (obj: PutFunctionEventInvokeConfigRequest) => any;
}
export interface PutProvisionedConcurrencyConfigRequest {
    
    FunctionName: string | undefined;
    
    Qualifier: string | undefined;
    
    ProvisionedConcurrentExecutions: number | undefined;
}
export declare namespace PutProvisionedConcurrencyConfigRequest {
    
    const filterSensitiveLog: (obj: PutProvisionedConcurrencyConfigRequest) => any;
}
export interface PutProvisionedConcurrencyConfigResponse {
    
    RequestedProvisionedConcurrentExecutions?: number;
    
    AvailableProvisionedConcurrentExecutions?: number;
    
    AllocatedProvisionedConcurrentExecutions?: number;
    
    Status?: ProvisionedConcurrencyStatusEnum | string;
    
    StatusReason?: string;
    
    LastModified?: string;
}
export declare namespace PutProvisionedConcurrencyConfigResponse {
    
    const filterSensitiveLog: (obj: PutProvisionedConcurrencyConfigResponse) => any;
}
export interface RemoveLayerVersionPermissionRequest {
    
    LayerName: string | undefined;
    
    VersionNumber: number | undefined;
    
    StatementId: string | undefined;
    
    RevisionId?: string;
}
export declare namespace RemoveLayerVersionPermissionRequest {
    
    const filterSensitiveLog: (obj: RemoveLayerVersionPermissionRequest) => any;
}
export interface RemovePermissionRequest {
    
    FunctionName: string | undefined;
    
    StatementId: string | undefined;
    
    Qualifier?: string;
    
    RevisionId?: string;
}
export declare namespace RemovePermissionRequest {
    
    const filterSensitiveLog: (obj: RemovePermissionRequest) => any;
}
export interface TagResourceRequest {
    
    Resource: string | undefined;
    
    Tags: {
        [key: string]: string;
    } | undefined;
}
export declare namespace TagResourceRequest {
    
    const filterSensitiveLog: (obj: TagResourceRequest) => any;
}
export interface UntagResourceRequest {
    
    Resource: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagResourceRequest {
    
    const filterSensitiveLog: (obj: UntagResourceRequest) => any;
}
export interface UpdateAliasRequest {
    
    FunctionName: string | undefined;
    
    Name: string | undefined;
    
    FunctionVersion?: string;
    
    Description?: string;
    
    RoutingConfig?: AliasRoutingConfiguration;
    
    RevisionId?: string;
}
export declare namespace UpdateAliasRequest {
    
    const filterSensitiveLog: (obj: UpdateAliasRequest) => any;
}
export interface UpdateCodeSigningConfigRequest {
    
    CodeSigningConfigArn: string | undefined;
    
    Description?: string;
    
    AllowedPublishers?: AllowedPublishers;
    
    CodeSigningPolicies?: CodeSigningPolicies;
}
export declare namespace UpdateCodeSigningConfigRequest {
    
    const filterSensitiveLog: (obj: UpdateCodeSigningConfigRequest) => any;
}
export interface UpdateCodeSigningConfigResponse {
    
    CodeSigningConfig: CodeSigningConfig | undefined;
}
export declare namespace UpdateCodeSigningConfigResponse {
    
    const filterSensitiveLog: (obj: UpdateCodeSigningConfigResponse) => any;
}
export interface UpdateEventSourceMappingRequest {
    
    UUID: string | undefined;
    
    FunctionName?: string;
    
    Enabled?: boolean;
    
    BatchSize?: number;
    
    FilterCriteria?: FilterCriteria;
    
    MaximumBatchingWindowInSeconds?: number;
    
    DestinationConfig?: DestinationConfig;
    
    MaximumRecordAgeInSeconds?: number;
    
    BisectBatchOnFunctionError?: boolean;
    
    MaximumRetryAttempts?: number;
    
    ParallelizationFactor?: number;
    
    SourceAccessConfigurations?: SourceAccessConfiguration[];
    
    TumblingWindowInSeconds?: number;
    
    FunctionResponseTypes?: (FunctionResponseType | string)[];
}
export declare namespace UpdateEventSourceMappingRequest {
    
    const filterSensitiveLog: (obj: UpdateEventSourceMappingRequest) => any;
}
export interface UpdateFunctionCodeRequest {
    
    FunctionName: string | undefined;
    
    ZipFile?: Uint8Array;
    
    S3Bucket?: string;
    
    S3Key?: string;
    
    S3ObjectVersion?: string;
    
    ImageUri?: string;
    
    Publish?: boolean;
    
    DryRun?: boolean;
    
    RevisionId?: string;
    
    Architectures?: (Architecture | string)[];
}
export declare namespace UpdateFunctionCodeRequest {
    
    const filterSensitiveLog: (obj: UpdateFunctionCodeRequest) => any;
}
export interface UpdateFunctionConfigurationRequest {
    
    FunctionName: string | undefined;
    
    Role?: string;
    
    Handler?: string;
    
    Description?: string;
    
    Timeout?: number;
    
    MemorySize?: number;
    
    VpcConfig?: VpcConfig;
    
    Environment?: Environment;
    
    Runtime?: Runtime | string;
    
    DeadLetterConfig?: DeadLetterConfig;
    
    KMSKeyArn?: string;
    
    TracingConfig?: TracingConfig;
    
    RevisionId?: string;
    
    Layers?: string[];
    
    FileSystemConfigs?: FileSystemConfig[];
    
    ImageConfig?: ImageConfig;
}
export declare namespace UpdateFunctionConfigurationRequest {
    
    const filterSensitiveLog: (obj: UpdateFunctionConfigurationRequest) => any;
}
export interface UpdateFunctionEventInvokeConfigRequest {
    
    FunctionName: string | undefined;
    
    Qualifier?: string;
    
    MaximumRetryAttempts?: number;
    
    MaximumEventAgeInSeconds?: number;
    
    DestinationConfig?: DestinationConfig;
}
export declare namespace UpdateFunctionEventInvokeConfigRequest {
    
    const filterSensitiveLog: (obj: UpdateFunctionEventInvokeConfigRequest) => any;
}
